{"version":3,"sources":["components/switch/Switch.jsx","redux/actions.js","config/endpoint.js","redux/actionTypes.js","App.js","serviceWorker.js","redux/reducers/switchManagement.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Switch","className","this","props","label","type","checked","switches","switchId","onChange","e","setSwitchStatus","target","React","Component","connect","state","ownProps","switchManagement","switchStatus","statusValue","dispatch","toggle_request_body","pattern","toggle_request","JSON","stringify","fetch","process","method","mode","credentials","headers","Headers","body","then","response","json","data","payload","initSwitches","Object","keys","sort","a","b","parseInt","replace","map","key","Boolean","window","location","hostname","match","initialState","combineReducers","action","length","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2SAIMA,E,uKAEQ,IAAD,OACL,OACI,yBAAKC,UAAU,OACX,+BAAQC,KAAKC,MAAMC,OACnB,2BACIC,KAAK,WACLC,QAASJ,KAAKC,MAAMI,SAASL,KAAKC,MAAMK,UACxCC,SAAU,SAACC,GACP,EAAKP,MAAMQ,gBACP,EAAKR,MAAMK,SACXE,EAAEE,OAAON,QACT,EAAKH,MAAMI,kB,GAblBM,IAAMC,WA0BZC,eAJS,SAACC,EAAOC,GAC5B,OAAO,2BAAKA,GAAZ,IAAsBV,SAAUS,EAAME,iBAAiBC,iBAKvD,CAAER,gBCRyB,SAACH,EAAUY,EAAab,GAAxB,OAC3B,SAAAc,GAEI,IAAMC,EAAsB,CACxBC,QAAQ,2BACDhB,GADA,kBAEFC,EAAWY,KAIdI,EAAiBC,KAAKC,UAAUJ,GAEtCK,MCnCGC,iCDqCC,CACIC,OAAQ,OACRC,KAAM,OACNC,YAAa,cACbC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,qBAEpBC,KAAMV,IAGTW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACG,SAAAG,GACIjB,EAAS,CACLhB,KEnDS,oBFoDTkC,QAASD,UDvBlBvB,CAGbf,GIWF,IAIee,eAJS,SAACC,EAAOC,GAC9B,OAAO,2BAAKA,GAAZ,IAAsBV,SAAUS,EAAME,iBAAiBC,iBAKvD,CAAEqB,aH9CwB,kBACxB,SAAAnB,GACIM,MCLGC,iCDOC,CACIE,KAAM,OACNC,YAAa,gBAGhBI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFjB,EAAS,CACLhB,KEhBS,gBFiBTkC,QAASD,UG+BdvB,EAnCf,SAAaZ,GAGXA,EAAMqC,eAEN,IAEMjC,EAFgDkC,OAAOC,KAAKvC,EAAMI,UAV5DoC,MACV,SAACC,EAAGC,GAAJ,OAAUC,SAASF,EAAEG,QAAQ,IAAK,KAAOD,SAASD,EAAEE,QAAQ,IAAK,QAWxBC,KACzC,SAAAxC,GACE,OAAO,kBAAC,EAAD,CACLyC,IAAKzC,EACLJ,MAAOI,EACPA,SAAUA,OAMhB,OACE,yBAAKP,UAAU,OACb,gCFhCK2B,kCEmCL,yBAAK3B,UAAU,cACZM,OCzBW2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACjBpC,aAAc,IAOlB,SAASR,EAAgBQ,GACrB,OAAO,eAAKA,GAGD,ICXAqC,cAAgB,CAAEtC,iBDWlB,WAAyC,IAA/BF,EAA8B,uDAAtBuC,EAAcE,EAAQ,uCACnD,OAAQA,EAAOpD,MACX,IHhBqB,gBGiBjB,IAAMc,EAAesB,OAAOC,KAAK1B,EAAMG,cAAcuC,OAAS,EAAI1C,EAAMG,aAA4BsC,EAAOlB,QAC3G,OAAO,2BACAvB,GADP,IAEIG,iBAGR,IHtByB,oBGuBrB,OAAO,2BACAH,GADP,IAEIG,aAAcR,EAAgB8C,EAAOlB,WAG7C,QACI,OAAOvB,M,QE1BJ2C,cAAYC,EAAaC,YAAgBC,MCKxDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6125dad8.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport { setSwitchStatus } from \"../../redux/actions\";\n\nclass Switch extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Led\">\n                <label>{this.props.label}</label>\n                <input\n                    type=\"checkbox\"\n                    checked={this.props.switches[this.props.switchId]}\n                    onChange={(e) => {\n                        this.props.setSwitchStatus(\n                            this.props.switchId,\n                            e.target.checked,\n                            this.props.switches\n                        );\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { ...ownProps, switches: state.switchManagement.switchStatus };\n}\n\nexport default connect(\n    mapStateToProps,\n    { setSwitchStatus }\n)(Switch);","import { INIT_SWITCHES, SET_SWITCH_STATUS } from \"./actionTypes\";\nimport { getSwitchPatternURL } from \"../config/endpoint\";\n\n\nexport const initSwitches = () => (\n    dispatch => {\n        fetch(\n            getSwitchPatternURL(),\n            {\n                mode: 'cors',\n                credentials: 'same-origin'\n            }\n        )\n            .then(response => response.json())\n            .then(data => {\n                dispatch({\n                    type: INIT_SWITCHES,\n                    payload: data\n                })\n            }\n            );\n    }\n);\n\nexport const setSwitchStatus = (switchId, statusValue, switches) => (\n    dispatch => {\n\n        const toggle_request_body = {\n            pattern: {\n                ...switches,\n                [switchId]: statusValue\n            }\n        };\n\n        const toggle_request = JSON.stringify(toggle_request_body);\n        \n        fetch(\n            getSwitchPatternURL(),\n            {\n                method: 'POST',\n                mode: 'cors',\n                credentials: 'same-origin',\n                headers: new Headers({\n                    'Content-Type': 'application/json'\n                }),\n                body: toggle_request\n            }\n        )\n            .then(response => response.json())\n            .then(\n                data => {\n                    dispatch({\n                        type: SET_SWITCH_STATUS,\n                        payload: data\n                    })\n                }\n            )\n    }\n);\n\n\n ","export const getSwitchPatternURL = () => {\n    return process.env.REACT_APP_SWITCH_SERVER_ENDPOINT;\n}","export const INIT_SWITCHES = \"INIT_SWITCHES\";\nexport const SET_SWITCH_STATUS = \"SET_SWITCH_STATUS\";\n","import React from 'react';\nimport './App.css';\nimport Switch from './components/switch/Switch';\nimport { initSwitches } from \"./redux/actions\";\nimport { connect } from \"react-redux\";\nimport { getSwitchPatternURL } from \"./config/endpoint\";\n\nfunction getSortedSwitchKeys(keys) {\n  return keys.sort(\n    (a, b) => parseInt(a.replace(\"s\", \"\")) - parseInt(b.replace(\"s\", \"\"))\n  );\n}\n\nfunction App(props) {\n\n\n  props.initSwitches();\n\n  const switchesKeysInProperOrder = getSortedSwitchKeys(Object.keys(props.switches));\n\n  const switches = switchesKeysInProperOrder.map(\n    switchId => {\n      return <Switch\n        key={switchId}\n        label={switchId}\n        switchId={switchId}\n      >\n      </Switch>\n    }\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        {getSwitchPatternURL()}\n      </header>\n      <div className=\"App-header\">\n        {switches}\n      </div>\n    </div>\n  );\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { ...ownProps, switches: state.switchManagement.switchStatus };\n}\n\nexport default connect(\n  mapStateToProps,\n  { initSwitches }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { INIT_SWITCHES, SET_SWITCH_STATUS } from \"../actionTypes\";\n\nconst initialState = {\n    switchStatus: {}\n};\n\nfunction initSwitches(switches) {\n    return switches;\n}\n\nfunction setSwitchStatus(switchStatus) {\n    return { ...switchStatus}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case INIT_SWITCHES: {\n            const switchStatus = Object.keys(state.switchStatus).length > 0 ? state.switchStatus : initSwitches(action.payload);\n            return {\n                ...state,\n                switchStatus\n            }\n        }\n        case SET_SWITCH_STATUS: {\n            return {\n                ...state,\n                switchStatus: setSwitchStatus(action.payload)\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n","import { combineReducers } from \"redux\";\nimport switchManagement from \"./switchManagement\";\n \nexport default combineReducers({ switchManagement });\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}